{"version":3,"sources":["assets/gameover.jpg","App.js","utils/shuffle.js","index.js"],"names":["App","useState","dogs","setDogs","currentPosition","setCurrentPosition","level","setLevel","score","setScore","highscore","setHighscore","isGameover","setIsGameover","getDogs","useCallback","a","fetch","mode","headers","Authorization","catch","error","console","result","json","resultJson","map","image","index","position","url","urls","thumb","useEffect","shuffleDogs","arrayToShuffle","arraySize","length","outputArray","Array","i","splice","Math","floor","random","pop","shuffleArray","reset","type","gamePlay","pos1","pos2","roundResult","log","comparePositions","className","id","onClick","src","gameover","alt","style","width","value","onChange","e","target","dog","dogIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9be278e7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gameover.184153fd.jpg\";","import {useEffect, useCallback, useState} from \"react\"\nimport {shuffleArray} from \"./utils/shuffle.js\"\nimport './App.css';\nimport gameover from \"./assets/gameover.jpg\"\n\nconst DOGS_PER_LEVEL = 6;\nconst API_LOCATION = \"https://api.unsplash.com\"\nconst API_QUERY = \"/photos/random?query=dogs&orientation=squarish&count=\"\nconst API_ACCESS_TOKEN = \"wdlcyHspKR9Mmp8P1BX45zKfYtV6COQLH0nYwxYGHfU\"\n\nfunction App() {\n\n  const [dogs, setDogs] = useState([]);\n  const [currentPosition, setCurrentPosition] = useState(0) \n  const [level, setLevel] = useState(1)\n  const [score, setScore] = useState(0)\n  const [highscore, setHighscore] = useState(0);\n  const [isGameover, setIsGameover] = useState(false)\n\n  \n  const getDogs = useCallback(async () => {\n      const result = await fetch(`${API_LOCATION}${API_QUERY}${level * DOGS_PER_LEVEL}`, {mode: \"cors\", headers: {Authorization: `Client-ID ${API_ACCESS_TOKEN}`}}).catch(error => console.error(error))\n      const resultJson = await result.json().catch(error => console.error(error));\n\n      if(!resultJson) {\n        return\n      }\n      \n      setDogs(resultJson.map((image, index) => {return {position: index, url: image.urls.thumb}}))\n      \n}, [level])\n\n  useEffect(() => {   \n    getDogs()\n  }, [getDogs])\n\n  const shuffleDogs = () => {\n    setDogs(shuffleArray(dogs))\n  }\n\n  function reset(type) {\n    getDogs();\n    switch (type) {\n      case \"normal\":\n        break;\n      case \"gameover\":\n        setCurrentPosition(0);\n        setScore(0)\n        setIsGameover(true)\n        break;\n      default:\n        console.error(\"unexpected reset type!\");\n    }\n  }\n\n  function comparePositions(pos1, pos2) {  \n    console.log(pos1 + \" \" + pos2)\n    return pos1 === pos2;\n  }\n\n  function gamePlay(pos1, pos2) {\n    const roundResult = comparePositions(pos1, pos2);\n    setCurrentPosition(currentPosition + 1)\n    setScore(score + 1)\n    shuffleDogs()\n\n \n\n    switch (roundResult) {\n      case true:\n        console.log(\"yay\");\n        if (score >= highscore) {\n          setHighscore(score + 1);\n          if (currentPosition + 1 === level * DOGS_PER_LEVEL) {\n            reset(\"normal\")\n            setCurrentPosition(0)\n          }\n        }\n        break;\n      case false:\n        console.log(\"nay!\")\n        reset(\"gameover\")\n        break;\n      default:\n        console.error(\"unexpected computed result\")\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {isGameover && <div id=\"gameoverContainer\">\n      <div id=\"gameOverScreen\">\n      <h2>GAME OVER</h2>\n      <p>Your Score: {score}</p>\n      <p>Highscore: {highscore}</p>\n      <button onClick={() => {\n        reset(\"gameover\")\n        setIsGameover(false);\n        }}>New Game!</button><div><img id=\"gameoverDog\" src={gameover} alt=\"sad dog looking through locked gate!\"></img></div>\n      </div></div>}\n      <h1>Dogs!</h1>\n      <p>Current Score: {score} | Highscore: {highscore}</p>\n      <div><p>Level: <input style={{width: \"25px\"}} type=\"number\" value={level} onChange={e => {\n      setLevel(e.target.value);\n      reset(\"gameover\");\n      setIsGameover(false)\n      }}></input></p></div>\n      {dogs.length === 0 && <p>Loading dogs...</p>}\n      <div id=\"imageContaier\">\n      <div id=\"imageArray\">{dogs.map((dog, dogIndex) => <div className=\"image\" key={dogIndex} onClick={() =>{\n        gamePlay(currentPosition, dog.position)\n        }}><img src={dog.url} alt=\"dog\"/></div>)}</div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const generateRandomArray = (minValue, maxValue) => {\n    if ((minValue >= maxValue) || (typeof minValue != \"number\" || typeof maxValue != \"number\")) {\n        console.error(\"Invalid arguments!\")\n        console.info(\"Usage: generateRandomArray(minValue, maxValue)\\nminValue must be a number smaller than maxValue which must also be a number.\")\n        return 1\n    }\n\n    const arraySize = maxValue - minValue + 1;\n    let numberArray = new Array(arraySize);\n    let outputArray = new Array(arraySize);\n\n    for (let i = 0; i < arraySize; i++) {\n        numberArray[i] = i + minValue;\n    }\n    for (let i = 0; i < arraySize; i++){\n        outputArray[i] = numberArray.splice(Math.floor(Math.random() * (numberArray.length)), 1).pop();\n    }\n    return outputArray\n}\n\n\n\nexport const shuffleArray = function(arrayToShuffle) {\n    const arraySize = arrayToShuffle.length;\n    const outputArray = new Array(arraySize);\n    for (let i = 0; i < arraySize; i++){\n        outputArray[i] = arrayToShuffle.splice(Math.floor(Math.random() * (arrayToShuffle.length)), 1).pop();\n    }\n\n    return outputArray\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}